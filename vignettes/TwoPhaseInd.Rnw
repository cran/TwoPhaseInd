%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
%\VignetteIndexEntry{TwoPhaseInd}
%\VignetteDepends{}
%\VignetteKeywords{Documentation}
%\VignettePackage{TwoPhaseInd}
\documentclass[12pt]{article}
\usepackage{times}
\usepackage{hyperref}
%\usepackage[authoryear,round]{natbib}

\textwidth=6.2in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=.1in
\evensidemargin=.1in
\headheight=-.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\newcommand{\R}{{\textsf{R}}}
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\term}[1]{{\emph{#1}}}
\newcommand{\Rpackage}[1]{\textsf{#1}}
\newcommand{\Rfunction}[1]{\texttt{#1}}
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Rfunarg}[1]{{\textit{#1}}}

%\bibliographystyle{plainnat}

\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE}

\title{The \Rpackage{TwoPhaseInd} package: Estimation of gene-treatment interactions in randomized clinical trials exploiting gene-treatment independence}
\author{Xiaoyu Wang, James Y. Dai}
\maketitle

\section{Introduction}

In randomized clinical trials, there are often ancillary studies with  outcome-dependent sampling to identify baseline genetic markers that modify treatment effect. The \Rpackage{TwoPhaseInd} package implements  several methods we developed to estimate gene-treatment interactions in randomized clinical trials, exploiting gene-treatment independence dictated by randomization \cite{Dai2009,Dai2012,Dai2014,Dai2015}. Substantial reduction of variance can be achieved by exploiting gene-treatment independence for estimating gene-treatment interaction and subgroup treatment effects. The sampling schemes considered in \Rpackage{TwoPhaseInd} include case-only design, case-control sampling, and case-cohort sampling. For case-control sampling, \Rpackage{TwoPhaseInd} provides two functions that compute two estimators- the semiparametric maximum likelihood estimator (SPMLE) and the maximum estimated likelihood estimator (MELE), both can exploit the gene-treatment independence \cite{Dai2009}. For case-cohort sampling, it provides a function (acoarm) to estimate parameters in a cox regression model by a multi-step estimation procedure developed for augmented case-only designs \cite{Dai2015}. In this document we show examples of applying the functions in the \Rpackage{TwoPhaseInd} package for various designs and estimators.

<<loadLibrary, echo=FALSE, results=hide>>=

library(TwoPhaseInd)
@

\section{Case-only design}
Case-only design can be used to estimate the gene-treatment interaction and subgroup treatment effects in trials with rare failure events. A function ``caseonly'' is provided in the package to estimate the treatment effect when biomarker=0 and the interaction between treatment and biomarker.

The inputs of caseonly function - caseonly(data, treatment, BaselineMarker, extra, fraction), include ``data'', a data frame contains the case-only data; ``treatment'', ``BaselineMarker'', and ``extra'' are the column names of ``data'' that represent the randomized treatment assignment, the biomarker of interest, and extra variables to be adjusted for respectively; ``fraction'' defines the randomization fraction of the active treatment assignment.

We show an example of applying the function below. 
First we load the example dataset:
<<data>>=
data(acodata)
dim(acodata)
str(acodata)
@

The data frame ``acodata'' was derived from the STEP trial \cite{Buchbinder2008,Pandey2013} to study the interactions between the host immune gene Fc-$gamma$ receptor and vaccine on HIV infection. We will use part of the data for case-only estimation here and later use this data for the augmented case-only estimation. It contains 907 participants and 14 variables. The key variables include ``vacc1\_evinf'', the time to HIV infection; ``f\_evinf'', the indicator variable for HIV infection; ``subcoh'', the indicator of whether the participant was selected into the sub-cohort for genotyping; ``ptid'', the participant identifier; ``f\_treatment'', the vaccine assignment variable; ``fcgr2a.3'', the genotype of Fc$\gamma$ receptor Fc$\gamma$RIIIa, the biomarker of interest here; the rest of variables are other covariates that can be adjusted for in the model. 


We then extract the case-only data, and apply the function to it:
<<cfit>>=
cfit=caseonly(data=acodata[acodata[,2]==1,], ##dataset
              treatment="f_treat",  ##treatment variable
              BaselineMarker="fcgr2a.3")  ##biomarker
cfit
@
The above outputs contain ``beta'' (the estimated parameter), ``stder'' (standard error of the estimate), and ``pVal'' (p-value of the estimate=0) for the treatment effect when biomarker=0 and the interaction between treatment and biomarker.

\section{Case-control design}

We took a Women's Health Initiative (WHI) biomarker study to illustrate our methods for case-control sampling. Twenty nine biomarkers were picked by WHI investigators as markers that are possibly associated with either stroke, venous thrombotic disease, or myocardial infarction. A comprehensive analysis of these samples was published by \cite{Kooperberg2007}. The results of this particular biomarker example using our methods were also shown in \cite{Dai2009}.  The methodologies for estimating SPMLE and MELE can be found in \cite{Dai2009}.


\subsection{SPMLE}

The spmle function computes semiparametric likelihood estimate for a logistic model under case-control sampling, using or not using gene-treatment independence. The latter is mostly pedagogical to show the efficiency gain of using the independence. 

The inputs of spmle function - spmle(data, response, treatment, BaselineMarker, extra, phase, ind, ...), include ``data'', a data frame to store all the input data; ``response'', ``treatment'', ``BaselineMarker'', and ``extra'' are the column names of ``data'' that represent response variable, the randomized treatment assignment, the biomarker of interest, and extra variables to be adjusted for respectively; ``phase'' is the column name of phase indicator; ``ind'' is a logical flag (TURE or FALSE) to indicate if incorporating the independence between the randomized treatment and biomarker.

We illustrate a few examples of applying spmle below.
First we load the example dataset:
<<whiBioMarker>>=
data(whiBioMarker)

dim(whiBioMarker)
str(whiBioMarker)
@ 

The example dataset ``whiBioMarker'' was used in WHI hormone trial to study the interaction between biomarker and hormone therapy (estrogen plus progestin) on stroke. It contains 10 variables and 16608 participants. The key variables include ``stroke'', the response variable for whether the participant have stroke; ``hrtdisp'', the hormone treatment variable; ``papbl'', the plasmin-antiplasmin complex, the biomarker example here; ``age'', the age of a participant; ``dias'', diastolic blood pressure; ``hyp'', whether the participant have hypertension; ``syst'', systolic blood pressure; ``diabtrt'', whether the participant have diabetes; ``lmsepi'', physical activity per week of a participant; ``phase'', the indicator if the biomarker been measured on an applicant (1: not measured, 2: measured. Usually it is expensive to measure biomarkers, and they are measured only on some applicants).

Here is an example code for estimating SPMLE without exploiting independent and with several covariates included in the model:
<<spmleNonIndExtra>>=
spmleNonIndExtra <- spmle(data=whiBioMarker,  ## dataset
               response="stroke",  ## response variable
               treatment="hrtdisp",	## treatment variable
               BaselineMarker="papbl",	## biomarker
               extra=c(
                       "age"
                        , "dias" 	
                        , "hyp" 	
                        , "syst" 	
                        , "diabtrt" 
                        , "lmsepi" 
                            ),	## extra variable(s)
               phase="phase",	## phase indicator
               ind=FALSE	## independent or non-indepentent
)

spmleNonIndExtra
@ 
The above outputs contain ``beta'', ``stder'', and ``pVal'' for the estimated parameters of the model.

Similarly we show an example of estimating SPMLE with exploiting independent and with several covariates included in the model:

<<spmleIndExtra>>=
spmleIndExtra <- spmle(data=whiBioMarker,	## dataset
            response="stroke",	## response variable
            treatment="hrtdisp",	## treatment variable
            BaselineMarker="papbl",	## biomarker
            extra=c(
               "age"  
		   , "dias"	
              , "hyp" 
              , "syst" 
              , "diabtrt"	
              , "lmsepi" 
                 ),	## extra variable(s)
            phase="phase", ## phase indicator
            ind=TRUE ## independent or non-indepentent
)

spmleIndExtra
@ 

\subsection{MELE}
The mele function computes semiparametric estimated likelihood estimate for a logistic model under case-control sampling, using or not using gene-treatment independence. It is slightly less efficient compared to the SPMLE, with less computation burden. 

The inputs of mele function - mele(data, response, treatment, BaselineMarker, extra, phase, ind), are the same as those of spmle. Users need to provide a data frame with column names of response, treatment, biomarker of interest, extra variables, phase indicator. The independence flag indicates if incorporating  the independence between the randomized treatment and biomarker.

Here is an example of estimating MELE with exploiting independent and with several covariates included in the model:

<<melIndExtra>>=
melIndExtra <- mele(data=whiBioMarker,	## dataset
          response="stroke",	## response variable
          treatment="hrtdisp",		## treatment variable
          BaselineMarker="papbl",		## biomarker
          extra=c(
             "age" 	
              , "dias"  
              , "hyp" ## 
              , "syst" 	
              , "diabtrt"	
              , "lmsepi" 
              ),	## extra variable(s)
          phase="phase",	## phase indicator
          ind=TRUE	## independent or non-indepentent
)
melIndExtra
@ 

We also show an example of estimating MELE without exploiting independent and with several covariates included in the model:
  
<<melNoIndExtra>>=
melNoIndExtra <- mele(data=whiBioMarker,	## dataset
            response="stroke",	## response variable
            treatment="hrtdisp",	## treatment variable
            BaselineMarker="papbl",	## biomarker
            extra=c(
                "age"
                , "dias" 	
                , "hyp" 	
                , "syst" 	
                , "diabtrt"	
                , "lmsepi" 
                ),	## extra variable(s)
            phase="phase",	## phase indicator
            ind=FALSE	## independent or non-indepentent
)
melNoIndExtra
@ 

\section{case-cohort design}

For two-arm, placebo-controlled trials with rare failure time endpoints, we can augment the case-only (ACO) design with random samples of controls from both arms, as in the classical case-cohort sampling scheme, or with a random sample of controls from the active treatment arm only. We show that these designs can identify all parameters in a Cox model and that the efficient case-only estimator can be incorporated in a two-step plug-in procedure\cite{Dai2015}. A data example was shown in \cite{Dai2015} incorporating case-only estimators in the classical case-cohort design improves the precision of all estimated parameters; sampling controls only in the active treatment arm attains a similar level of efficiency. A function ``acoarm'' was provided for case-cohort studies.

The inputs of acoarm function - acoarm(data, svtime, event, treatment, BaselineMarker, id, subcohort, esttype, augment , extra), include ``data'', a data frame for input data; ``svtime'', ``event'', ``treatment'' ``BaselineMarker'', ``id'', ``subcohort'', and ``extra'' are column names of ``data'' that store survival time, indicator of failure event, treatment, biomarker of interest, participant identifier, sub-cohort indicator, extra variables to be adjusted for, respectively; ``esttype'' defines the option for methods used in case-cohort model (1: Self-Prentice estimator, 0: Lin-Ying estimator); ``augment'' defines how the controls augmented to case-only data (0: from the placebo arm, 1: from the active treatment arm, or 2: from both arms).

We show a few examples to apply the function using the same data we used in the case-only section:

First we load the example dataset:
<<data>>=
data(acodata)

dim(acodata)
str(acodata)
@

Here is an example of ACO using controls from the placebo arm:

<<rfit0>>=
rfit0 <- acoarm(data=acodata,  ## dataset
                 svtime="vacc1_evinf", ## survival time
                 event="f_evinf",  ## event
                 treatment="f_treat", ## treatment
                 BaselineMarker="fcgr2a.3",  #biomarker
                 subcohort="subcoh", #subcohort
                 esttype=1, ## use Self-Prentice method
                 augment=0, ## augment from placebo arm
                 extra=c("f_agele30"
                         ,"f_hsv_2"
                         ,"f_ad5gt18"
                         ,"f_crcm"
                         ,"any_drug"
                         ,"num_male_part_cat"
                         ,"uias"
                         ,"uras")) ## extra varibles
rfit0$Estimate
rfit0$Covariance
@

Here is another example of ACO using controls from the active arm:
<<rfit1>>=
rfit1 <- acoarm(data=acodata,  ## dataset
                 svtime="vacc1_evinf",  ## survival time
                 event="f_evinf",  ## event
                 treatment="f_treat", ## treatment
                 BaselineMarker="fcgr2a.3",  #biomarker
                 subcohort="subcoh", #subcohort
                 esttype=1, ## use Self-Prentice method
                 augment=1,## augment from active arm
                 weight=NULL,
                 extra=c("f_agele30"
                         ,"f_hsv_2"
                         ,"f_ad5gt18"
                         ,"f_crcm"
                         ,"any_drug"
                         ,"num_male_part_cat"
                         ,"uias"
                         ,"uras")) ## extra varibles
rfit1$Estimate
rfit1$Covariance
@

Here is an additional example of ACO using controls from both arms:
<<rfit2>>=
rfit2 <- acoarm(data=acodata,  ## dataset
                 svtime="vacc1_evinf",  ## survival time
                 event="f_evinf",  ## event
                 treatment="f_treat", ## treatment
                 BaselineMarker="fcgr2a.3",  #biomarker
                 subcohort="subcoh", #subcohort
                 esttype=1, ## use Self-Prentice method
                 augment=2,## augment from both arms
                 weight=NULL,
                 extra=c("f_agele30"
                         ,"f_hsv_2"
                         ,"f_ad5gt18"
                         ,"f_crcm"
                         ,"any_drug"
                         ,"num_male_part_cat"
                         ,"uias"
                         ,"uras")) ## extra varibles
rfit2
@

\section{apply to whole-genome data}

The functions in the package  can be  applied to whole-genome SNP data. We applied the functions of caseonly, spmle, and mele to a more comprehensive dataset from WHI trial to estimate the interaction between biomarkers (SNPs) and hormone therapy (estrogen plus progestin) on type II diabetes. In total 21047 applicants in the trial were included, and 3147 of them have genome-wide SNP data.  We used 78081 SNPs on chromosome 1 to show the package is scalable to whole-genome analysis.

The results are shown in the below. The quantile-quantile plots in the upper panels (Figure A, B, C) compare the distribution of observed p-values with that of a uniform-distributed p-values. Although there is no signficant p-value, the q-q line is right in the diagonal direction, suggesting the algorithm works well in estimation for all three methods. The first two graphics in the lower panels of Figure 1  (Figure D, E) shows the estimated variances of SNP-treatment interaction, using or without the independence between treatment and the SNP, suggesting that using independence yields a much more precise estimates of interaction. The last graph in the lower panel (Figure F) shows the comparison of the case-only estimator and the SPMLE estimator, suggesting the two agrees well in efficiency of estimation since type II  diabete is relative rare in the WHI hormone trial.

@<<fig=TRUE,echo=FALSE, width=10, height=8>>=
@source("plotwholegenome.R")
@@
<<echo = FALSE, results=tex>>=

cat('\\begin{figure}[h]\n')
file = "./figure1new.png"
cat('\\includegraphics{', file, '}\n', sep = '')
cat('\\end{figure}\n')
@

\section{session information}

The version number of \R{} and packages loaded for generating the vignette were:

\begin{verbatim}
<<sessionInfo, echo=FALSE, results=tex>>=
sessionInfo()
@
\end{verbatim}

\bibliographystyle{plain}
\bibliography{TwoPhaseInd}

\end{document}
